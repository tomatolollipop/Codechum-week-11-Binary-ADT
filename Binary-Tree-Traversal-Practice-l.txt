Binary Tree Traversal Practice l
import java.util.Scanner; 

class Node {  
    int value;   
    Node left, right;    
    Node(int value) {      
        this.value = value;     
        left = right = null;  
        
        
    } 
    
    
} 

class BinarySearchTree {   
    Node insert(Node root, int value) {     
        if (root == null) return new Node(value);      
        if (value < root.value)        
        root.left = insert(root.left, value);     
        else         
        
        root.right = insert(root.right, value);      
        return root;   
        
        
    }     
    
    Node delete(Node root, int value) {  
        if (root == null) return root;       
        if (value < root.value)        
        root.left = delete(root.left, value);   
        else if (value > root.value)        
        root.right = delete(root.right, value);  
        else {           
            if (root.left == null) return root.right;       
            else if (root.right == null) return root.left;       
            root.value = minValue(root.right);       
            root.right = delete(root.right, root.value);     
            
            
        }       
        
        return root;    
        
        
    }    
    
    int minValue(Node root) {      
        int minv = root.value;    
        while (root.left != null) {         
            minv = root.left.value;      
            root = root.left;      
            
            
        }       
        
        return minv;    
        
        
    }     
    
    void printPreOrder(Node root) {      
        if (root == null) return;      
        System.out.print(root.value);      
        if (root.left != null || root.right != null) System.out.print(" -> ");   
        if (root.left != null) {       
            printPreOrder(root.left);         
            if (root.right != null) System.out.print(" -> ");      
            
            
        }       
        if (root.right != null) {       
            printPreOrder(root.right);        
            
            
        }    
        
        
    } 
    
    
} 

public class Main {    
    public static void main(String[] args) {   
        Scanner sc = new Scanner(System.in);  
        BinarySearchTree bst = new BinarySearchTree();   
        Node root = null;        
        int count = 1;        
        while (true) {       
            System.out.print("Enter operation " + count + ": ");         
            String input = sc.nextLine().trim();          
            if (input.equals("0")) break;          
            if (input.startsWith("+")) {             
                int val = Integer.parseInt(input.substring(1).trim());   
                root = bst.insert(root, val);         
                
                
            } else if (input.startsWith("-")) {           
                int val = Integer.parseInt(input.substring(1).trim());      
                root = bst.delete(root, val);          
                
                
            }            
            
            count++;      
            
            
        }   
           
         bst.printPreOrder(root);    
         
        
    }
    
    
}