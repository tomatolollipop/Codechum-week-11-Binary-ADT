Make a Binary Tree 

Node.java|
class Node { 
    int data;  
    Node left, right;   
    Node(int data) {      
        this.data = data;      
        left = right = null;   
        
        
    } 
    
    
}

BST.java
class BST {  
    Node root;    
    Node insert(Node root, int value) {      
        if (root == null)         
        return new Node(value);      
        if (value < root.data)         
        root.left = insert(root.left, value);    
        else if (value > root.data)       
        root.right = insert(root.right, value);       
        return root;   
        
        
    }  
    
    Node search(Node root, int value) {    
        if (root == null || root.data == value)   
        return root;         if (value < root.data)         
        return search(root.left, value);      
        return search(root.right, value);    
        
        
    }     
    
    Node delete(Node root, int value) {      
        if (root == null)       
        return root;        
        
        if (value < root.data)      
        root.left = delete(root.left, value);     
        else if (value > root.data)       
        root.right = delete(root.right, value);    
        
        else {          
            if (root.left == null)             
            return root.right;       
            
            else if (root.right == null)       
            return root.left;           
            
            root.data = minValue(root.right);       
            root.right = delete(root.right, root.data);     
            
            
        }       
        
        return root;  
        
        
    }     
    
    int minValue(Node root) {      
        int min = root.data;     
        while (root.left != null) {       
            min = root.left.data;         
            root = root.left;        
            
            
        }       
        
        return min;   
        
    }   
    
    void inOrder(Node root) {   
        if (root != null) {        
            inOrder(root.left);       
            System.out.print(root.data + " ");      
            inOrder(root.right);       
            
            
        }    
        
        
    } 
    
    
}

Main.java
import java.util.Scanner; 

public class Main {  
    public static void main(String[] args) {    
        Scanner sc = new Scanner(System.in);       
        BST bst = new BST();         
        Node root = null;      
        while (true) {          
            System.out.print("\nEnter operation: ");     
            int op = sc.nextInt();           
            if (op == 0) {             
                System.out.println();           
                bst.inOrder(root);             
                break;            
                
                
            }           
            else if (op == 1) {      
                System.out.print("Enter element to add: ");         
                int val = sc.nextInt();          
                root = bst.insert(root, val);         
                
                
            }         
            
            else if (op == 2) {           
                System.out.print("Enter element to search: ");         
                int val = sc.nextInt();         
                System.out.println();  
                
                if (bst.search(root, val) != null)       
                System.out.println(val + " exists");   
                
                else                  
                System.out.println(val + " does not exists");          
                
                
            }          
            
            else if (op == 3) {       
                System.out.print("Enter element to delete: ");          
                int val = sc.nextInt();            
                root = bst.delete(root, val);           
                System.out.println();            
                bst.inOrder(root);        
                System.out.println();           
                
                
            }       
            
            
        }         
        
        sc.close();  
        
        
    } 
    
}