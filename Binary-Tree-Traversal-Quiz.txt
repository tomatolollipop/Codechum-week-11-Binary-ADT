Binary Tree Traversal Quiz
import java.util.*;

class Node {   
    int value;  
    Node left, right;  
    Node(int value) { this.value = value; 
        
        
    } 
    
    
} 

class BinaryTree {  
    Node insert(Node node, int value) {      
        if (node == null) return new Node(value);
        if (value < node.value) node.left = insert(node.left, value);       
        else node.right = insert(node.right, value);     
        return node;    
        
        
    }    
    
    Node delete(Node node, int value) { 
        if (node == null) return null;       
        if (value < node.value) node.left = delete(node.left, value);   
        else if (value > node.value) node.right = delete(node.right, value);    
        else {          
            if (node.left == null) return node.right;       
            if (node.right == null) return node.left;      
            Node min = node.right;         
            while (min.left != null) min = min.left;      
            node.value = min.value;         
            node.right = delete(node.right, min.value);    
            
            
        }        
        
        return node;  
        
        
    }  
    
    void inorder(Node node, List<Integer> list) {   
        if (node != null) {         
            inorder(node.left, list);       
            list.add(node.value);         
            inorder(node.right, list);        
            
            
        }   
        
        
    }     
    
    void preorder(Node node, List<Integer> list) {     
        if (node != null) {         
            list.add(node.value);          
            preorder(node.left, list);        
            preorder(node.right, list);       
            
            
        }  
        
        
    }    
    
    void postorder(Node node, List<Integer> list) {       
        if (node != null) {          
            postorder(node.left, list);        
            postorder(node.right, list);       
            list.add(node.value);      
            
            
        }  
        
        
    }    
    
    void printTraversal(List<Integer> list) {     
        for (int i = 0; i < list.size(); i++) {       
            System.out.print(list.get(i));          
            if (i < list.size() - 1) System.out.print(" -> ");      
            
            
        }   
        
        
    } 
    
    
} 

public class Main {   
    public static void main(String[] args) {       
        Scanner sc = new Scanner(System.in);      
        BinaryTree tree = new BinaryTree();     
        Node root = null;      
        int count = 1;     
        while (true) {         
            System.out.print("Enter operation " + count + ": ");   
            String input = sc.nextLine().replaceAll("\\s+", "");        
            if (input.equals("0")) break;         
            if (input.startsWith("+")) {       
                try {           
                    int num = Integer.parseInt(input.substring(1));   
                    root = tree.insert(root, num);         
                    
                    
                } catch (Exception e) {}          
                
                
            } else if (input.startsWith("-")) {      
                try {                
                    int num = Integer.parseInt(input.substring(1));      
                    root = tree.delete(root, num);       
                    
                    
                } catch (Exception e) {}      
                
                
            }            
            
            count++;     
            
            
        }       
        
        List<Integer> inorderList = new ArrayList<>();     
        List<Integer> postorderList = new ArrayList<>();  
        List<Integer> preorderList = new ArrayList<>();     
        tree.inorder(root, inorderList);     
        tree.postorder(root, postorderList);     
        tree.preorder(root, preorderList);       
        System.out.println("\nInorder traversal:");  
        tree.printTraversal(inorderList);    
        System.out.println("\nPostorder traversal:");    
        tree.printTraversal(postorderList);      
        System.out.println("\nPreorder traversal:");    
        tree.printTraversal(preorderList);    
        
        
    } 
    
    
}